#include<stdio.h>
#include<stdlib.h>
#define TABLE_SIZE 10

typedef struct Node{
    int key;
    struct Node* link; 
} Node;

Node* HashT[TABLE_SIZE];

int hashF(int key){
    return key%TABLE_SIZE;
}

void insert(int key){
    int index = hashF(key);
    Node* new = malloc(sizeof(Node));
    new->key = key;
    new->link= HashT[index];
    HashT[index]=new;
}
Node* search(int key){
    int index = hashF(key);
    Node* temp = HashT[index];
    while(temp){
        if(temp->key==key)
            return temp;
        temp=temp->link;
    }
    return NULL;
}

void display(){
    for(int i=0;i<TABLE_SIZE;i++){
        printf("Index %d: ",i);
        Node* temp = HashT[i];
        while(temp!=NULL){
            printf("%d --",temp->key);
            temp=temp->link;
        }
        printf("-->NULL\n");
    }
}
int main() {
    int choice, key;
    while(1) {
        printf("\nMenu:\n");
        printf("1. Insert\n");
        printf("2. Search\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch(choice) {
            case 1:
                printf("Enter the key to insert: ");
                scanf("%d", &key);
                insert(key);
                break;
            case 2:
                printf("Enter the key to search: ");
                scanf("%d", &key);
                Node* result = search(key);
                if(result)
                    printf("Key %d found\n", key);
                else
                    printf("Key %d not found\n", key);
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting...\n");
                return 0;
            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}
